apiVersion: v1
kind: ConfigMap
metadata:
  name: templates
data:
  snapshot.yaml: |
    apiVersion: snapshot.storage.k8s.io/v1
    kind: VolumeSnapshot
    metadata:
      name: pg1-postgres-${freq}-${id}
    spec:
      volumeSnapshotClassName: ocs-external-storagecluster-rbdplugin-snapclass
      source:
        persistentVolumeClaimName: ${pvc}
  daily.sh: |
    PVC=`kubectl get deployment/pg1-postgres -o custom-columns=PVC:.spec.template.spec.volumes[].persistentVolumeClaim.claimName | tail -1`
    ID=`date +'%s000'`
    sed -e "s/\${id}/$ID/g" -e "s/\${pvc}/$PVC/g" -e "s/\${freq}/daily/g" /var/configmap/snapshot.yaml > /tmp/snapshot.yaml
    kubectl apply -f /tmp/snapshot.yaml
    kubectl get volumesnapshot -o custom-columns=NAME:.metadata.name --sort-by='{.metadata.name}' | grep "^pg1-postgres-daily-" | tac | awk '{if (NR>2) system("kubectl delete volumesnapshot/"$1);}'
  hourly.sh: |
    PVC=`kubectl get deployment/pg1-postgres -o custom-columns=PVC:.spec.template.spec.volumes[].persistentVolumeClaim.claimName | tail -1`
    ID=`date +'%s000'`
    sed -e "s/\${id}/$ID/g" -e "s/\${pvc}/$PVC/g" -e "s/\${freq}/hourly/g" /var/configmap/snapshot.yaml > /tmp/snapshot.yaml
    kubectl apply -f /tmp/snapshot.yaml
    kubectl get volumesnapshot -o custom-columns=NAME:.metadata.name --sort-by='{.metadata.name}' | grep "^pg1-postgres-hourly-" | tac | awk '{if (NR>2) system("kubectl delete volumesnapshot/"$1);}'
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: daily-backup-pg1-postgres
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: kubectl-aws
            image: expert360/kubectl-awscli:v1.11.2
            command: [ "sh", "/var/configmap/daily.sh" ]
            volumeMounts:
              - mountPath: /var/configmap
                name: configtemplate
          volumes:
            - configMap:
                name: templates
              name: configtemplate
